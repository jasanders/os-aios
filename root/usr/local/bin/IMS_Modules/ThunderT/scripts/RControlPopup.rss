<?xml version='1.0' ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<bookmark>DynamicPopup</bookmark>

<onEnter>
	print("page title is ", popupHeader);

	if (popupOptionSize &gt; 0) {
		found = "false";
		checkIndex = 0;
		while(1){
			checkTitle = getStringArrayAt(popupOptions, checkIndex);

			if (checkTitle == popupOptionFocus) {
				focusIndex = getFocusItemIndex();
				redrawDisplay("item", focusIndex);

				setFocusItemIndex(checkIndex);
				setItemFocus(checkIndex);
				redrawDisplay("item", checkIndex);
			}

			isInactive = isSettingInactive(popupHeader, checkTitle);
			if (isInactive == "true") {
				popupOptions = deleteStringArrayAt(popupOptions, checkIndex);
				popupOptionSize = popupOptionSize - 1;
				found = "true";
			}
			else {
				checkIndex += 1;
			}

	  		if (checkIndex == popupOptionSize){
				break;
	  		}
		}
		if (found == "false") {
			if (popupOptionFocusIndex &lt; popupOptionSize) {
				setFocusItemIndex(popupOptionFocusIndex);
				setItemFocus(popupOptionFocusIndex);
				redrawDisplay("item", popupOptionFocusIndex);
			}
		}
	}

	if (popupTimeout &gt; 0) {
		print("setRefreshTime, ", popupTimeout * 1000);
		setRefreshTime(popupTimeout * 1000);
	}
</onEnter>

<onRefresh>
	if (popupTimeout &gt; 0) {
		print("setRefreshTime, ", -1);
	    setRefreshTime(-1);

		focusIndex = getFocusItemIndex();
		data = getStringArrayAt(popupOptions, focusIndex);
		if (data != NULL) {
			setReturnString(data);
		}
		postMessage("return");
	}
</onRefresh>

<onExit>
	setRefreshTime(-1);
</onExit>

<!-- mediaDisplay of parent will be merged into the mediaDisplay here, include all child elements, ex: onEnter, text, image, etc. -->
<mediaDisplay
	name=onePartView

	sideColorRight=-1:-1:-1
	sideColorLeft=-1:-1:-1
	sideColorTop=-1:-1:-1
	sideColorBottom=-1:-1:-1
	backgroundColor=-1:-1:-1
	focusBorderColor=-1:-1:-1
	unFocusBorderColor=-1:-1:-1
	itemBackgroundColor=16:40:66

	showHeader="no"
	showDefaultInfo="no"
	slidingItemText="no"
>
<itemPerPage>
	<script>
		itemPerPage;
	</script>
</itemPerPage>
<viewAreaXPC>
	<script>
		viewAreaXPC;
	</script>
</viewAreaXPC>
<viewAreaYPC>
	<script>
		viewAreaYPC;
	</script>
</viewAreaYPC>
<viewAreaWidthPC>
	<script>
		viewAreaWidthPC;
	</script>
</viewAreaWidthPC>
<viewAreaHeightPC>
	<script>
		viewAreaHeightPC;
	</script>
</viewAreaHeightPC>

<itemWidthPC>
	<script>
		itemWidthPC;
	</script>
</itemWidthPC>
<itemHeightPC>
	<script>
		itemHeightPC;
	</script>
</itemHeightPC>
<itemImageWidthPC>
	<script>
		itemWidthPC;
	</script>
</itemImageWidthPC>
<itemImageHeightPC>
	<script>
		itemHeightPC;
	</script>
</itemImageHeightPC>
<itemXPC>
	<script>
		itemXPC;
	</script>
</itemXPC>
<itemYPC>
	<script>
		itemYPC;
	</script>
</itemYPC>
<itemImageXPC>
	<script>
		itemXPC;
	</script>
</itemImageXPC>
<itemImageYPC>
	<script>
		itemYPC;
	</script>
</itemImageYPC>
<imageFocus>
	<script>
		imageFocus;
	</script>
</imageFocus>

<backgroundDisplay>
	<image offsetXPC=0 widthPC=100>
		<offsetYPC>
			<script>
				0;
			</script>
		</offsetYPC>
		<heightPC>
			<script>
				topPC;
			</script>
		</heightPC>
		<script>
			image = "setup_menu/image/setup_popup_bg_normal_top.fsp";
			if (widthTargetIndex == 1 || widthTargetIndex == 2) {
				image = "setup_menu/image/setup_popup_bg_wide_top.fsp";
			}
			image;
		</script>
	</image>
	<image offsetXPC=0 widthPC=100>
		<offsetYPC>
			<script>
				topPC-1;
			</script>
		</offsetYPC>
		<heightPC>
			<script>
				100-bottomPC+1-topPC+1;
			</script>
		</heightPC>
		<script>
			image = "setup_menu/image/setup_popup_bg_normal_middle.fsp";
			if (widthTargetIndex == 1 || widthTargetIndex == 2) {
				image = "setup_menu/image/setup_popup_bg_wide_middle.fsp";
			}
			image;
		</script>
	</image>
	<image offsetXPC=0 widthPC=100>
		<offsetYPC>
			<script>
				100-bottomPC;
			</script>
		</offsetYPC>
		<heightPC>
			<script>
				bottomPC;
			</script>
		</heightPC>
		<script>
			image = "setup_menu/image/setup_popup_bg_normal_bottom.fsp";
			if (widthTargetIndex == 1 || widthTargetIndex == 2) {
				image = "setup_menu/image/setup_popup_bg_wide_bottom.fsp";
			}
			image;
		</script>
	</image>
</backgroundDisplay>

<text offsetXPC=5 widthPC=90 align=center fontSize=18 backgroundColor=-1:-1:-1 foregroundColor=255:255:255 >
	<offsetYPC>
		<script>
			2;
		</script>
	</offsetYPC>
	<heightPC>
		<script>
			topPC;
		</script>
	</heightPC>
	<script>
		popupHeader;
	</script>
</text>

<text offsetXPC=5 widthPC=90 align=left fontSize=14 backgroundColor=-1:-1:-1 foregroundColor=255:255:255 >
	<offsetYPC>
		<script>
			topPC+gapPC;
		</script>
	</offsetYPC>
	<heightPC>
		<script>
			messagePC;
		</script>
	</heightPC>
	<lines>
		<script>
			message_line;
		</script>
	</lines>
	<script>
		popupMessages;
	</script>
</text>

<image offsetXPC=46.7 widthPC=6.3 heightPC=4.1 redraw="yes">
	<offsetYPC>
		<script>
			topPC+gapPC-4.1;
		</script>
	</offsetYPC>
	<script>
		icon = "";
		focusIndex = getFocusItemIndex();
		if (popupOptionSize &gt; itemPerPage) {
			if (focusIndex == 0) {
				icon = "setup_menu/image/setup_popup_up_unfocus.fsp";
			}
			else {
				icon = "setup_menu/image/setup_popup_up_focus.fsp";
			}
		}
		icon;
	</script>
</image>

<image offsetXPC=46.7 widthPC=6.3 heightPC=4.1 redraw="yes">
	<offsetYPC>
		<script>
			100-bottomPC;
		</script>
	</offsetYPC>
	<script>
		icon = "";
		focusIndex = getFocusItemIndex();
		if (popupOptionSize &gt; itemPerPage) {
			boundary = popupOptionSize - 1;
			if (focusIndex == boundary) {
				icon = "setup_menu/image/setup_popup_down_unfocus.fsp";
			}
			else {
				icon = "setup_menu/image/setup_popup_down_focus.fsp";
			}
		}
		icon;
	</script>
</image>

<!-- itemDisplay will draw widget inside the item area, item area is decided by mediaDisplay attributes -->
<itemDisplay>
	<text offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100 useBackgroundSurface=yes/>
	<image offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100>
	<script>
	status = getDrawingItemState();
	if (status == "focus")
	{
		"setup_menu/image/setup_p2_list_focus.fsp";
	}
	else
	{
		null;
	}
	</script>
	</image>
	<text offsetXPC=5 offsetYPC=5 widthPC=90 heightPC=90 align=center fontSize=16 backgroundColor=-1:-1:-1 foregroundColor=255:255:255>
		<script>
			queryIndex = getQueryItemIndex();
			data = getStringArrayAt(popupOptions, queryIndex);
			data;
		</script>
	</text>
</itemDisplay>

<!-- Some variables defined here will be referred to define the other attributes in mediaDisplay. -->
<onEnter>
	setParentFade(128);

	print("popupHeader = ", popupHeader);
	print("popupMessageSize = ", popupMessageSize);
	print("popupMessages = ", popupMessages);
	print("popupOptionSize = ", popupOptionSize);
	print("popupOptions = ", popupOptions);
	print("popupOptionFocus = ", popupOptionFocus);
	print("popupOptionFocusIndex = ", popupOptionFocusIndex);
	print("popupOptionWide = ", popupOptionWide);
	print("popupTimeout = ", popupTimeout);

	itemPerPage = 6;
	viewAreaXPC = 34.4;
	viewAreaYPC = 27.2;
	viewAreaWidthPC = 31.1;
	viewAreaHeightPC = 47.8;

	itemXPC = 22.2;
	itemYPC = 33.3;
	itemWidthPC = 56.1;
	itemHeightPC = 18.3;
	itemImageXPC = 22.2;
	itemImageYPC = 33.3;
	itemImageWidthPC = 56.1;
	itemImageHeightPC = 18.3;

	imageFocus = "setup_menu/image/setup_popup_bar_focus.fsp";
	imageUnFocus="";

	textWidth = getTextWidth(popupHeader, 18);
	maxWidth = textWidth;
	if (popupOptionSize &gt; 0) {
		checkIndex = 0;
		while(1){
			checkTitle = getStringArrayAt(popupOptions, checkIndex);
			textWidth = getTextWidth(checkTitle, 16);
			if (textWidth &gt; maxWidth) {
				maxWidth = textWidth;
			}

			checkIndex += 1;
	  		if (checkIndex == popupOptionSize){
				break;
	  		}
		}
	}
	targetWidth = maxWidth * 1.12;

	widthTargetIndex = 0;
	if (widthTargetIndex &lt; popupOptionWide) {
		widthTargetIndex = popupOptionWide;
	}
	osd_width = 1280;
	bg_width_0 = 398;
	bg_width_1 = 509;
	bg_width_2 = 609;
	bg_width_3 = 798;
	item_width_0 = 223 * 1.20;
	item_width_1 = 280 * 1.25;
	item_width_2 = 329 * 1.30;
	item_width_3 = 470 * 1.35;

	while(1){
		if (widthTargetIndex == 0) {
			if (targetWidth &lt; item_width_0) {
				viewAreaWidthPC = 100 * bg_width_0 / osd_width;
				itemWidthPC = 100 * item_width_0 / bg_width_0;
				imageFocus = "setup_menu/image/setup_popup_bar_focus.fsp";
				break;
			}
		}
		else if (widthTargetIndex == 1) {
			if (targetWidth &lt; item_width_1) {
				viewAreaWidthPC = 100 * bg_width_1 / osd_width;
				itemWidthPC = 100 * item_width_1 / bg_width_1;
				imageFocus = "setup_menu/image/setup_popup_bar_focus_wide.fsp";
				break;
			}
		}
		else if (widthTargetIndex == 2) {
			if (targetWidth &lt; item_width_2) {
				viewAreaWidthPC = 100 * bg_width_2 / osd_width;
				itemWidthPC = 100 * item_width_2 / bg_width_2;
				imageFocus = "setup_menu/image/setup_popup_bar_focus_wide.fsp";
				break;
			}
		}
		else if (widthTargetIndex == 3) {
			if (1) {
				viewAreaWidthPC = 100 * bg_width_3 / osd_width;
				itemWidthPC = 100 * item_width_3 / bg_width_3;
				imageFocus = "setup_menu/image/setup_popup_bar_focus_wide.fsp";
				break;
			}
		}
		widthTargetIndex += 1;
	}

	viewAreaXPC = (100 - viewAreaWidthPC) / 2;
	itemXPC = (100 - itemWidthPC) / 2;

	osd_height = 720;
	bg_top = 80;
	bg_middle = 46;
	bg_gap = 16;
	bg_bottom = 30;
	if (popupOptionSize &lt; itemPerPage) {
		itemPerPage = popupOptionSize;
	}

	message_line = 0;
	if (popupMessageSize &gt; 0) {
		checkIndex = 0;
		while(1){
			checkMsg = getStringArrayAt(popupMessages, checkIndex);
			textWidth = getTextWidth(checkMsg, 14);
			capableWordCount = getCapableWordCount(checkMsg, 14, viewAreaWidthPC * 0.88, 0);
			totalWordCount = getTotalWordCount(checkMsg);

			msg_width = ((viewAreaWidthPC * 0.88) / 100) * osd_width;
			line_ratio = textWidth * 1.12 / msg_width;

			if (line_ratio &lt; 1 || line_ratio == 1 || capableWordCount == totalWordCount) {
				message_line += 1;
			}
			else {
				line_base = Integer(line_ratio);
				message_line += 1 + line_base;
			}

			checkIndex += 1;
	  		if (checkIndex == popupMessageSize){
				break;
	  		}
		}
	}

	message_height = bg_middle * message_line;
	option_height = bg_middle * itemPerPage;

	total_height = bg_top + bg_gap;
	if (message_height &gt; 0) {
		total_height += bg_gap + message_height + bg_gap;
	}
	if (option_height &gt; 0) {
		total_height +=  bg_gap + option_height + bg_gap;
	}
	total_height += bg_bottom;

	viewAreaHeightPC = 100 * total_height / osd_height;
	if (viewAreaHeightPC &gt; 100) {
		viewAreaHeightPC = 100;
	}
	viewAreaYPC  = (100 - viewAreaHeightPC) / 2;
	itemYPos = bg_top + bg_gap;
	if (message_height &gt; 0) {
		itemYPos += bg_gap + message_height + bg_gap;
	}
	itemYPos += bg_gap;
	itemYPC = 100 * itemYPos / total_height;
	itemHeightPC = 100 * bg_middle / total_height;

	topPC = 100 * bg_top / total_height;
	gapPC = 100 * bg_gap / total_height;
	messagePC = 100 * message_height / total_height;
	optionPC = 100 * option_height / total_height;
	bottomPC = 100 * bg_bottom / total_height;
</onEnter>

<onUserInput>
	if (popupTimeout &gt; 0) {
		print("popupTimeout = ", popupTimeout);
	}

	handle = "false";
	userInput = currentUserInput();
	focusIndex = getFocusItemIndex();
	if ("enter" == userInput) {
		data = getStringArrayAt(popupOptions, focusIndex);
		if (data != NULL) {
			print("item was pressed. set return string = ", data);
			setReturnString(data);
		}
		handle = "return";
	}
	else if ("right" == userInput || "left" == userInput) {
		handle = "true";
	}
	handle;
</onUserInput>

</mediaDisplay>


<channel>
	<title>
		<script>
			popupHeader;
		</script>
	</title>
	<link>rss_file://./IMS_Modules/ThunderT/scripts/RControlPopup.rss</link>


<!-- use itemSize element to describe how many items in the page -->
<itemSize>
	<script>
		popupOptionSize;
	</script>
</itemSize>


</channel>
</rss>
