<?xml version="1.0" encoding="utf-8" ?> 
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<script>
	print("Stop Audio>>>>>>>>>>>");
	playItemURL(-1,1);

	
	path = getStoragePath("tmp");
	path = path + "meidafly_video.dat";
	content = readStringFromFile(path);
	print("play ",content);
	episodeUrl = content;
	
	returnFromSeek = "no";
	infoDisplay = "no";
	infoDisplayTime = 0;

	keyFilePath = getStoragePath("key") + "__mdfly_key.dat";
	decryptionKeyArray = decFile(keyFilePath);
   
	sharedKey = getStringArrayAt(decryptionKeyArray,0);
	app_id =getStringArrayAt(decryptionKeyArray,1);
	  


	storagePathMediaflyEpisode = getStoragePath("tmp");
	storagePathMediaflyEpisode = storagePathMediaflyEpisode + "mediaflyEpisode.dat";
	currentEpisodeSlug = readStringFromFile(storagePathMediaflyEpisode);
	print("read episode slug", currentEpisodeSlug);


	mediaTypeFilter = getEnv("mdflyfilter");
	print("mediaTypeFilter:",mediaTypeFilter);
	    

	fileName= getStoragePath("tmp") + "mediaflyToken.dat";
	tokenArray = readStringFromFile(fileName);
	valtoken = getStringArrayAt(tokenArray, 0);
	tokenId = getStringArrayAt(tokenArray, 1);
	tokenTime = getStringArrayAt(tokenArray, 2);
	print("tokenTime: ",tokenTime);



    	storagePathMediaflyShowOrChannel = getStoragePath("tmp");
	storagePathMediaflyShowOrChannel = storagePathMediaflyShowOrChannel +"mediaflyInWhich.dat";
	episodeInWhich = readStringFromFile(storagePathMediaflyShowOrChannel);
	print("episodeInWhich",episodeInWhich);


	mediaflyStorageSource = getStoragePath("tmp");
	mediaflyStorageSource = mediaflyStorageSource +"mediafly_source.dat";
	source = readStringFromFile(mediaflyStorageSource);
	
	if (source=="Mediafly")
	{
		contentSourceSlug = "__mediafly__";
		storagePathdefaultUserName = getStoragePath("key");
	    	storagePathdefaultUserName = storagePathdefaultUserName + "mdfly_defaultusername.dat";
	    	linkedUserName = readStringFromFile(storagePathdefaultUserName);
	    	print("linkedUserName:",linkedUserName);
	}
	else
	{
		contentSourceSlug = source;
		current_contentsource_file = getStoragePath("key")+"mdfly_tmpContentSource.dat";
		infoArray = readStringFromFile(current_contentsource_file);
		linkedUserName = getStringArrayAt(infoArray,3);
		print("linkedUserName",linkedUserName);
	}

	videoPostAction = null;
	videoPlayLength = null;
	videoPlayPosition = null;

	playMode = getEnv("playMode");
	print("playMode=",playMode);


	firstPlay = 1;
    
</script>


<onEnter>

     startVideo = 1;
     pauseVideo = -1;

     if (playMode=="Play")
     {
     	if (firstPlay==1)
     	{
     		firstPlay = 0;
     		print("First Play  in Play Mode>>>>>>>>>");
     		setRefreshTime(1);
     		
     	}
     	else if (firstPlay==0)
     		{
     			print("Return from Audio Page in Play Mode>>>>>>");
     			content = readStringFromFile(path);
			print("play ",content);
			episodeUrl = content;
			currentEpisodeSlug = getEnv("RecentEpisodeSlug");
			print(">>>>>>>>>>>>currentEpisodeSlug:",currentEpisodeSlug);
			unsetEnv("RecentEpisodeSlug");
			if (currentEpisodeSlug!=null)
			{
			
				setRefreshTime(1);
				playItemURL(-1,1);
				cancelIdle();
			}
			else
			{
				postMessage("return");
			}
     		}
     
     }
     else if (playMode=="Switch")
     		{

     			print("Jump From Audio Page in Switch Mode>>>>>>>>>");
     			currentEpisodeSlug = getEnv("RecentEpisodeSlug");
			print(">>>>>>>>>>>>currentEpisodeSlug:",currentEpisodeSlug);
			unsetEnv("RecentEpisodeSlug");
     			setRefreshTime(1);
     			
     		}

</onEnter>

 

<onExit>
      playItemURL(-1, 1);
      setRefreshTime(-1);
</onExit>

<onRefresh>
		if (startVideo == 1)
		{
			print("I am moviePlayback onEnter !! startVideo: ", startVideo);
			playItemURL(content, 0, "mediaDisplay", "previewWindow");
			setRefreshTime(1000);
			print("content:",content);
			startVideo = 0;
		}
		else if (returnFromSeek == "no")
		{
			videoProgress = getPlaybackStatus();
			playElapsed = getStringArrayAt(videoProgress, 0);
			playStatus = getStringArrayAt(videoProgress, 3);
			print("Video status !!!!", videoProgress);
			
			if (playStatus == 0)
			{
				postMessage("return");
			}
			else if (playElapsed &lt;= 0)
			{
				bufProgress = getCachedStreamDataSize(0, 1048576);
				print("still in buffering ......", bufProgress);
				updatePlaybackProgress(bufProgress, "mediaDisplay", "bufferStatus", "progressBar");
			
			}
			else if (playStatus==2)
			{
				if (pauseVideo==-1)
				{
					print(">>>>>>>>>>Delete Loading Bar>>>>>>>>>>>>");
					updatePlaybackProgress("delete", "mediaDisplay", "bufferStatus", "progressBar");

					if (linkedUserName!=null)
					{
						videoPostAction = "play";
						videoPlayPosition = 0;
						videoPlayLength = getStringArrayAt(videoProgress,1);
						print("PostAction:PlayPostion--",videoPlayPosition);
						print("PostAction:PlayLength--",videoPlayLength);
						executeScript("VideoPostAction");
					}
					pauseVideo = 0;
				}
				
				if (infoDisplay=="yes")
				{
					
					updatePlaybackProgress(videoProgress, "mediaDisplay", "infoDisplay","progressBar");
					print("updateVideoPlaybackProgress>>>>>>>>>>>>>>>>>>");
				
				}
				else if (infoDisplay=="no")
					{
						print(">>>>>>>>>>>>>>>>>>>>>>Delete Information Bar>>>>>>>>>");
						updatePlaybackProgress("delete", "mediaDisplay", "infoDisplay","progressBar");
						infoDisplay = "yesOrno";
					}
				
				
			}
		}
		else if (returnFromSeek == "yes")
		{			
			bufProgress = getCachedStreamDataSize(0, 1048576);
			bufferRatio = getStringArrayAt(bufProgress, 0);
			print("bufferRatio is: ", bufferRatio);
			
			if (bufferRatio &lt; 100 &amp;&amp; tickCount &lt; 120)
			{
				tickCount = Add(tickCount, 1);
				updatePlaybackProgress(bufProgress, "mediaDisplay", "bufferStatus", "progressBar2");
			}
			else
			{
				returnFromSeek = "no";
				tickCount = 0;
				
				playAtTime(timePoint);
				updatePlaybackProgress("delete", "mediaDisplay", "bufferStatus", "progressBar2");
			}
			
		}
		null;
		
</onRefresh>

<mediaDisplay name=threePartsView >

    <idleImage>image/POPUP_LOADING_00.fsp </idleImage>
    <idleImage> image/POPUP_LOADING_00.fsp</idleImage>
    <idleImage> image/POPUP_LOADING_00.fsp</idleImage>
    <idleImage>image/POPUP_LOADING_00.fsp  </idleImage>
    <idleImage> image/POPUP_LOADING_00.fsp </idleImage>
    <idleImage> image/POPUP_LOADING_00.fsp</idleImage>


<bufferStatus>

<progressBar backgroundColor=-1:-1:-1, offsetXPC=25, offsetYPC=70, widthPC=60, heightPC=20>
	<bar offsetXPC=20, offsetYPC=48, widthPC=60, heightPC=6, barColor=200:200:200, progressColor=26:129:211, bufferColor=-1:-1:-1/>
	
	<text bgBlend=no offsetXPC=0 offsetYPC=40 widthPC=20 heightPC=20 fontSize=15 backgroundColor=-1:-1:-1 foregroundColor=250:250:250 useBackgroundSurface=yes>
	  <script>
	       
		showstr = "Loading....";
		showstr;
	  </script>
	</text>

<destructor offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100 Color=-1:-1:-1>
</destructor>

</progressBar>

<progressBar2 offsetXPC=10 offsetYPC=80 widthPC=80 heightPC=12>
	<image offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=12>
	<script>
	"image/mediafly_seek_bar_bg.fsp";
	</script>
	</image>

	<image offsetXPC=0 offsetYPC=0 heightPC=12>
	<script>
	"image/mediafly_seek_bar_fg.fsp";
	</script>
	<widthPC>
	<script>
	bufferRatio;
	</script>
	</widthPC>
	</image>

	<text   bgBlend=no  offsetXPC=45 offsetYPC=20 widthPC=50 heightPC=50 backgroundColor=-1:-1:-1 foregroundColor=250:250:250 fontSize=12.2 useBackgroundSurface=yes>
	<script>
	"Buffering: " + bufferRatio + "%";
	</script>
	</text>

	<destructor offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100 Color=-1:-1:-1>
	</destructor>
  </progressBar2>

</bufferStatus>

 <infoDisplay>
 
      <progressBar offsetXPC=0 offsetYPC=85 widthPC=100 heightPC=15>
	<image offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100>
		<script>
		"image/play_movie_bg.fsp";
		</script>
	</image>

	<image offsetXPC=10.625 offsetYPC=12.9 widthPC=78.75 heightPC=8>
		<script>
			"image/progressbar_01.fsp";
		</script>
	</image>

	<image offsetXPC=10.625 offsetYPC=12.9 heightPC=8>
		<widthPC>
			<script>
			vidProgress = getPlaybackStatus();
			playElapsed = getStringArrayAt(vidProgress, 0); 
			playStatus = getStringArrayAt(vidProgress, 3); 
			playTotal = getStringArrayAt(vidProgress, 1); 
			print(">>>>>>>>>>>>>>>>>>Information Update Progress:",vidProgress);
			if (playStatus == 2)
			{
			    width = (playElapsed/playTotal*78.75);
			    if (width &gt;= 78.75)
			        width = 78.75;
			    width;
			}
			else
			    "0";
			</script>
		</widthPC>
	<script>
		"image/progressbar_02.fsp";
	</script>
	</image>

	<text offsetXPC=79 offsetYPC=22 widthPC=1.2 heightPC=30 fontSize=12.2 backgroundColor=-1:-1:-1 foregroundColor=250:250:250>
	<script>
	"/";
	</script>
	</text>

<bar offsetXPC=0 offsetYPC=0 widthPC=0 heightPC=0/>
<currentTime offsetXPC=73 offsetYPC=22 widthPC=6 heightPC=30 backgroundColor=-1:-1:-1 foregroundColor=250:250:250 fontSize=11.2   />
<totalTime offsetXPC=80 offsetYPC=22 widthPC=6 heightPC=30 backgroundColor=-1:-1:-1 foregroundColor=250:250:250 fontSize=11.2   />

<destructor offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100 Color=-1:-1:-1>
</destructor>

</progressBar>
      
 </infoDisplay>


<previewWindow windowColor=0:0:0 offsetXPC=0 offsetYPC=0 widthPC=100 heightPC=100 >
</previewWindow>

<onUserInput>
input = currentUserInput();
ret = "false";
print("Got input: ", input);
seek = videoIsSeekable();
print("Seek or not :",seek);
if (input=="return")
{
	if (startVideo==0)
	{
		print("Video Stop>>>>>>>>>>>>>");
		playItemURL(-1,1);
		if (linkedUserName!=null)
		{
			videoPostAction = "stop";
			videoPlayPosition = getStringArrayAt(videoProgress,0);
			videoPlayLength = getStringArrayAt(videoProgress,1);
			print("PostAction:PlayPostion--",videoPlayPosition);
			print("PostAction:PlayLength--",videoPlayLength);
			executeScript("getToken");
			executeScript("VideoPostAction");
		}
		
	}
	ret = "false";
}
else if (input == "setup" || input == "guide")
{
	pauseVideo = 1;
	ret = "false";
}
else if (input == "video_stop")
{
	print("Video Stop>>>>>>>>>>>>>");
	postMessage("return");
	ret = "true";
}
else if(input == "video_completed")
{
	print("Video Completed>>>>>>>>>>");

	if (startVideo==0)
	{
		if (linkedUserName!=null)
		{
			videoPostAction = "end";
			videoPlayPosition = getStringArrayAt(videoProgress,0);
			videoPlayLength = getStringArrayAt(videoProgress,1);
			print("PostAction:PlayPostion--",videoPlayPosition);
			print("PostAction:PlayLength--",videoPlayLength);
			executeScript("getToken");
			executeScript("VideoPostAction");
		}

		if (episodeInWhich=="Channel")
		{
			executeScript("getToken");
			executeScript("getNextEpisodeForChannel");
		}
		else if (episodeInWhich=="Show")
		{	
			executeScript("getToken");
			executeScript("getNextEpisodeForShow");
		}	
		if (status=="ok")
		{
			content = playUrl;
			currentEpisodeSlug = episodeSlug;
			pauseVideo = -1;
			executeScript("onChangePlayMode");
			
		}
		else
		{
			playItemURL(-1,1);
			startVideo = -1;
			pauseVideo = -1;
			postMessage("return");
		}
	}
	ret = "true";
}
else if(input=="video_play"&amp;&amp;pauseVideo==1)
	{
		print("video Resume>>>>>>>>");
		pauseVideo = 0;
		
		ret = "false";
	}
else if (input=="video_play"&amp;&amp;pauseVideo==0)
	{
		print("video Start to Pause>>>>>>>>");
		pauseVideo = 1;
		postMessage("video_pause");
		ret = "true";
	}
else if (input=="video_pause")
	{
		print("video Pause>>>>>>>");
		
		pauseVideo = 1;
		ret = "false";
	}
else if (input=="display"&amp;&amp;pauseVideo&gt;-1)
	{
		print("video Display Info>>>>>>");
		if (infoDisplay!="yes")
		{
			infoDisplay = "yes";
		}
		else if (infoDisplay=="yes")
			{
				infoDisplay = "no";
			}
		
	}
else if (input == "right" || input == "left")
{
	status = getPlaybackStatus();
	playStatus = getStringArrayAt(status, 3);
	if (playStatus == "2")
	{
		setEnv("videoStatus", status);
		playItemURL(-1, 2);
		timePoint = doModalRss("rss_file://./IMS_Modules/Mediafly/mediafly_seekpopup.rss");
		
		
		returnFromSeek = "yes";
		tickCount = 0;
		ret = "true";
	}
}
else if (input=="pageup"&amp;&amp;pauseVideo&gt;-1)
{
	if (episodeInWhich=="Channel")
	{
		executeScript("getToken");
		executeScript("getPrevEpisodeForChannel");
	}
	else if (episodeInWhich=="Show")
	{
		executeScript("getToken");
		executeScript("getPrevEpisodeForShow");
	}
	if (status=="ok")
	{
		content = playUrl;
		episodeUrl = content;
		currentEpisodeSlug = episodeSlug;
		pauseVideo = -1;
		executeScript("onChangePlayMode");
		
		
	}
	
	
}
else if (input=="pagedown"&amp;&amp;pauseVideo&gt;-1)
{

	if (episodeInWhich=="Channel")
	{
		executeScript("getToken");
		executeScript("getNextEpisodeForChannel");
	}
	else if (episodeInWhich=="Show")
	{
		executeScript("getToken");
		executeScript("getNextEpisodeForShow");
	}	
		if (status=="ok")
	{
		content = playUrl;
		episodeUrl = content;
		currentEpisodeSlug = episodeSlug;
		pauseVideo = -1;
		executeScript("onChangePlayMode");
		
	}
	
}


ret;
</onUserInput>

</mediaDisplay>


<onChangePlayMode>
	if (episodeMediaType=="Video")
	{
		print("continue Play in the mode");
		startVideo = 1;
		setRefreshTime(1);
		playItemURL(-1,1);
		cancelIdle();
		
	}
	else if (episodeMediaType=="Audio")
		{

				path = getStoragePath("tmp");
				path = path + "mediafly_audio.dat";
				writeStringToFile(path,playUrl);
				setEnv("RecentEpisodeSlug",currentEpisodeSlug);
				setRefreshTime(-1);

				audioEpisodeInfo = getStoragePath("tmp");
				 audioEpisodeInfo = audioEpisodeInfo + "meidafly_audioEpisodeInfo.dat";
				 episodeInfo = null;
				 episodeInfo = pushBackStringArray(episodeInfo,audioTitle);
				 episodeInfo = pushBackStringArray(episodeInfo,audioImageUrl);
				 writeStringToFile(audioEpisodeInfo,episodeInfo);
				 
			if (playMode=="Play")
			{
				print("Need To Jump To Audio Play Page");
				setEnv("playMode","Switch");

				jumpToLink("audioLink");
				
			}
			else if (playMode=="Switch")
				{
					print("Need To Return to Audio Play Page");
					setEnv("playMode","Play");

					postMessage("return");
				}
		}
		


</onChangePlayMode>



<audioLink>
	 <link>
	          <script>
	           "rss_file://./IMS_Modules/Mediafly/mediafly_episode_audioplay.rss";
	          </script>
        </link>
</audioLink>


<getNextEpisodeForChannel>

	storagePathMediaflyChannel = getStoragePath("tmp");
    	storagePathMediaflyChannel = storagePathMediaflyChannel + "mediaflyChannel.dat";
    
    	channelSlug = readStringFromFile(storagePathMediaflyChannel);
    	print("read from: ",storagePathMediaflyChannel, "return channelSlug: ",channelSlug);

    	inclAttr = "title,description,imageUrl,channel,published,url,mediaType";
    	
    	userContext = readStringFromFile(getStoragePath("tmp") + "mdflyUserContext.dat");
	if ( userContext == null || userContext == "")
		 userContext = "app_context_system";

	md5_string = MD5(sharedKey,tokenId,channelSlug,currentEpisodeSlug,inclAttr,mediaTypeFilter,userContext);
	print("md5 string", md5_string);

    	urlNextEpisode = "http://api.mediafly.com/api/rest/2.0/Mediafly.Channels.GetNextEpisodeForChannel?app_id="+app_id+"&amp;token=";
    	urlNextEpisode = urlNextEpisode +valtoken;
    	urlNextEpisode = urlNextEpisode + "&amp;channelSlug=" + channelSlug;
    	urlNextEpisode = urlNextEpisode + "&amp;episodeSlug=" + currentEpisodeSlug;
    	urlNextEpisode = urlNextEpisode + "&amp;includeAttributes=" + inclAttr;
    	urlNextEpisode = urlNextEpisode + "&amp;mediaType=" + mediaTypeFilter;
    	urlNextEpisode = urlNextEpisode + "&amp;user_context=" + urlEncode(userContext);
    	urlNextEpisode = urlNextEpisode + "&amp;call_sig=";
        urlNextEpisode = urlNextEpisode + md5_string;

        print("urlNextEpisode:",urlNextEpisode);

        	file = loadXMLFile(urlNextEpisode);
        	
	    if (file == null) 
	    {
		
		    print("Load URL fail ", url);
	    }
	    else 
	    {
	    	   status = getXMLAttribute("response", "status");
	    	   print("Status:",status);
	    	   
		   if (status=="ok")
		   {
		   	episodeStatus =  getXMLAttribute("response","episodeResponse","status");
		   	print("episodeStatus = ",episodeStatus);
		   	episodeSlug = getXMLAttribute("response","episodeResponse","episode","slug");
		   	print(">>>>>>>>>>>>>>>>>episodeSlug",episodeSlug);
		   	episodeMediaType = getXMLAttribute("response","episodeResponse","episode","mediaType");
		   	print(">>>>>>>>>>>>>>episodeMediaType,",episodeMediaType);
		   	
		   	playUrl = getXMLAttribute("response","episodeResponse","episode","url");
		   	if(episodeMediaType=="Audio")
			{
				audioTitle = getXMLAttribute("response","episodeResponse","episode","title");
				audioImageUrl = getXMLAttribute("response","episodeResponse","episode","imageUrl");
			}


		   	
		   }
		
	    }

</getNextEpisodeForChannel>





<getPrevEpisodeForChannel>
	storagePathMediaflyChannel = getStoragePath("tmp");
    	storagePathMediaflyChannel = storagePathMediaflyChannel + "mediaflyChannel.dat";
    
    	channelSlug = readStringFromFile(storagePathMediaflyChannel);
    	print("read from: ",storagePathMediaflyChannel, "return channelSlug: ",channelSlug);

    	inclAttr = "title,description,imageUrl,channel,published,url,mediaType";

    	userContext = readStringFromFile(getStoragePath("tmp") + "mdflyUserContext.dat");
	if ( userContext == null || userContext == "")
		 userContext = "app_context_system";

	md5_string = MD5(sharedKey,tokenId,channelSlug,currentEpisodeSlug,inclAttr,mediaTypeFilter,userContext);
	print("md5 string", md5_string);
	
    	urlPrevEpisode = "http://api.mediafly.com/api/rest/2.0/Mediafly.Channels.GetPrevEpisodeForChannel?app_id="+app_id+"&amp;token=";
    	urlPrevEpisode = urlPrevEpisode +valtoken;
    	urlPrevEpisode = urlPrevEpisode + "&amp;channelSlug=" + channelSlug;
    	urlPrevEpisode = urlPrevEpisode + "&amp;episodeSlug=" + currentEpisodeSlug;
    	urlPrevEpisode = urlPrevEpisode + "&amp;includeAttributes=" + inclAttr;
    	urlPrevEpisode = urlPrevEpisode + "&amp;mediaType=" + mediaTypeFilter;
    	urlPrevEpisode = urlPrevEpisode + "&amp;user_context=" + urlEncode(userContext);
    	urlPrevEpisode = urlPrevEpisode + "&amp;call_sig=";
        urlPrevEpisode = urlPrevEpisode + md5_string;

        print("urlPrevEpisode:",urlPrevEpisode);

        	file = loadXMLFile(urlPrevEpisode);
        	
	    if (file == null) 
	    {
		
		    print("Load URL fail ", url);
	    }
	    else 
	    {
	    	   status = getXMLAttribute("response", "status");
	    	   print("Status:",status);
	    	   
		   if (status=="ok")
		   {
		   	episodeStatus =  getXMLAttribute("response","episodeResponse","status");
		   	print("episodeStatus = ",episodeStatus);
		   	episodeSlug = getXMLAttribute("response","episodeResponse","episode","slug");
		   	print(">>>>>>>>>>>>>>>>>episodeSlug",episodeSlug);
		   	episodeMediaType = getXMLAttribute("response","episodeResponse","episode","mediaType");
		   	print(">>>>>>>>>>>>>>episodeMediaType,",episodeMediaType);
		   	playUrl = getXMLAttribute("response","episodeResponse","episode","url");
		   	if(episodeMediaType=="Audio")
			{
				audioTitle = getXMLAttribute("response","episodeResponse","episode","title");
				audioImageUrl = getXMLAttribute("response","episodeResponse","episode","imageUrl");
			}
		   	
		   }
		
	    }

    
</getPrevEpisodeForChannel>

<getNextEpisodeForShow>

    storagePathMediaflyShow = getStoragePath("tmp");
    storagePathMediaflyShow = storagePathMediaflyShow + "mediaflyShow.dat";
    
    	showSlug = readStringFromFile(storagePathMediaflyShow);




	md5_string = MD5(sharedKey,tokenId,showSlug,currentEpisodeSlug,mediaTypeFilter);
	print("md5 string", md5_string);
	
    	urlNextEpisode = "http://api.mediafly.com/api/rest/2.0/Mediafly.Shows.GetNextEpisodeForShow?app_id="+app_id+"&amp;token=";
    	urlNextEpisode = urlNextEpisode +valtoken;
    	urlNextEpisode = urlNextEpisode + "&amp;showSlug=" + showSlug;
    	urlNextEpisode = urlNextEpisode + "&amp;episodeSlug=" + currentEpisodeSlug;
    	urlNextEpisode = urlNextEpisode + "&amp;mediaType=" + mediaTypeFilter;
    	urlNextEpisode = urlNextEpisode + "&amp;call_sig=";
        urlNextEpisode = urlNextEpisode + md5_string;

        print("urlNextEpisode:",urlNextEpisode);

        	file = loadXMLFile(urlNextEpisode);
        	
	    if (file == null) 
	    {
		
		    print("Load URL fail ", url);
	    }
	    else 
	    {
	    	   status = getXMLAttribute("response", "status");
	    	   print("Status:",status);
	    	   
		   if (status=="ok")
		   {
		   	episodeStatus =  getXMLAttribute("response","episodeResponse","status");
		   	print("episodeStatus = ",episodeStatus);
		   	episodeSlug = getXMLAttribute("response","episodeResponse","episode","slug");
		   	print(">>>>>>>>>>>>>>>>>episodeSlug",episodeSlug);
		   	episodeMediaType = getXMLAttribute("response","episodeResponse","episode","mediaType");
		   	print(">>>>>>>>>>>>>>episodeMediaType,",episodeMediaType);
		   	playUrl = getXMLAttribute("response","episodeResponse","episode","url");
		   	if(episodeMediaType=="Audio")
			{
				audioTitle = getXMLAttribute("response","episodeResponse","episode","title");
				audioImageUrl = getXMLAttribute("response","episodeResponse","episode","imageUrl");
			}
		   	
		   }
		
	    }

</getNextEpisodeForShow>





<getPrevEpisodeForShow>
 storagePathMediaflyShow = getStoragePath("tmp");
    storagePathMediaflyShow = storagePathMediaflyShow + "mediaflyShow.dat";
    
    	showSlug = readStringFromFile(storagePathMediaflyShow);



	md5_string = MD5(sharedKey,tokenId,showSlug,currentEpisodeSlug,mediaTypeFilter);
	print("md5 string", md5_string);
	
    	urlPrevEpisode = "http://api.mediafly.com/api/rest/2.0/Mediafly.Shows.GetPrevEpisodeForShow?app_id="+app_id+"&amp;token=";
    	urlPrevEpisode = urlPrevEpisode +valtoken;
    	urlPrevEpisode = urlPrevEpisode + "&amp;showSlug=" + showSlug;
    	urlPrevEpisode = urlPrevEpisode + "&amp;episodeSlug=" + currentEpisodeSlug;
    	urlPrevEpisode = urlPrevEpisode + "&amp;mediaType=" + mediaTypeFilter;
    	urlPrevEpisode = urlPrevEpisode + "&amp;call_sig=";
        urlPrevEpisode = urlPrevEpisode + md5_string;

        print("urlPrevEpisode:",urlPrevEpisode);

        	file = loadXMLFile(urlPrevEpisode);
        	
	    if (file == null) 
	    {
		
		    print("Load URL fail ", url);
	    }
	    else 
	    {
	    	   status = getXMLAttribute("response", "status");
	    	   print("Status:",status);
	    	   
		   if (status=="ok")
		   {
		    	episodeStatus =  getXMLAttribute("response","episodeResponse","status");
		   	print("episodeStatus = ",episodeStatus);
		   	episodeSlug = getXMLAttribute("response","episodeResponse","episode","slug");
		   	print(">>>>>>>>>>>>>>>>>episodeSlug",episodeSlug);
		   	episodeMediaType = getXMLAttribute("response","episodeResponse","episode","mediaType");
		   	print(">>>>>>>>>>>>>>episodeMediaType,",episodeMediaType);
		   	playUrl = getXMLAttribute("response","episodeResponse","episode","url");

		   	if(episodeMediaType=="Audio")
			{
				audioTitle = getXMLAttribute("response","episodeResponse","episode","title");
				audioImageUrl = getXMLAttribute("response","episodeResponse","episode","imageUrl");
			}
		   }
		
	    }

    
</getPrevEpisodeForShow>

<VideoPostAction>
					md5_string = MD5(sharedKey,tokenId, videoPostAction,videoPlayLength,videoPlayPosition,currentEpisodeSlug,contentSourceSlug,"video",episodeUrl,linkedUserName);
				         print("md5 string", md5_string);
				         url = "http://api.mediafly.com/api/rest/3.0/Mediafly.Experience.PostAction?app_id="+app_id;
				         url = url +"&amp;token="+ valtoken;
				         url = url+"&amp;action="+videoPostAction;
				         url = url + "&amp;length=" +videoPlayLength;
				         url = url + "&amp;position=" + videoPlayPosition;
				         url = url +"&amp;slug="+currentEpisodeSlug;
				         url = url+"&amp;source="+contentSourceSlug;
				         url = url+"&amp;type="+"video";
				         url = url+"&amp;url="+episodeUrl;
				         url = url +"&amp;user_context=" +linkedUserName;
				    	 url = url + "&amp;call_sig=";
				    	 url = url + md5_string;
				     	 print("url", url);
			     		 file = loadXMLFile(url);
				    	  if (file == null)
				      	{
					      print("failed to load ", url);
					     
					     
				      	}
				      	else
				     	 {
						      
						      status = getXMLAttribute("response", "status");
						      print("token status: ", status);
						      if(status == "fail")
						      {
							      err =  getXMLAttribute("response", "err", "message");
							      print ("error", err);
						      }
						   
				      	}
	
</VideoPostAction>

  <getToken>
  print("Get Token ");
  if(valtoken == null || tokenTime == null || (getSystemTime() - 3300) &gt; tokenTime)
  {
  	if(tokenArray != null)
        {
          
          tokenArray = deleteStringArrayAt(tokenArray,0);
          tokenArray = deleteStringArrayAt(tokenArray,0);
          tokenArray = deleteStringArrayAt(tokenArray,0);
        }
       url = "http://api.mediafly.com/api/rest/2.0/Mediafly.Authentication.GetToken?app_id="+app_id+"";
       url = url + "&amp;thirdPartyUserID=" + VtunergetMACaddress();
       print("url", url);
      
      file = loadXMLFile(url);

      if (file == null)
      {
  	      print("failed to load ", url);
  	      titleString = "Sign in failed!";
  	      print("call redrawDisplay()");
  	      redrawDisplay();
      }
      else
      {
		        valtoken  = getXMLText("response","token");
		        tokenId   = getXMLAttribute("response","token","id");
		        print("token = ", valtoken);
		        print("token id = ", tokenId);

	        if ( valtoken != null )
	        {
		          storagePathMediaflyToken = getStoragePath("tmp");
		          storagePathMediaflyToken = storagePathMediaflyToken + "mediaflyToken.dat";
		          tokenArray = pushBackStringArray(tokenArray, valtoken);
		          tokenArray = pushBackStringArray(tokenArray, tokenId);
		          tokenTime = getSystemTime();
		          tokenArray = pushBackStringArray(tokenArray, tokenTime);
		          
		          writeStringToFile(storagePathMediaflyToken, tokenArray);
		       
		          print("write to file ", storagePathMediaflyToken);
	        }
      }
   }
  </getToken> 

<channel>
	<title>Mediafly</title>
	<link>mediafly_episode_videoplay.rss</link>

</channel>




</rss>

